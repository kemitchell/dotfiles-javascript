# ECMA
snippet proto
$1.prototoype.$2 = function($3) {
	$0 }
endsnippet

snippet fun "function" !w
function $1($2) {
	$0 }
endsnippet

snippet f "function" !w
function($1) {
	$0 }
endsnippet

snippet vf "var = function(){}" !b
var $1 = function($2) {
	$0 }
endsnippet

snippet iife "IIFE" !w
(function($1) {
	$0 })()
endsnippet

snippet sf
(function() {
	$1
	return function($2) {
		$0 } })()
endsnippet

snippet if
if ($1) {
	$0 }
endsnippet

snippet eif
else if ($1) {
	$0 }
endsnippet

snippet e
else {
	$0 }
endsnippet

snippet ife
if ($1) {
	$2 }
else {
	$0 }
endsnippet

snippet ter
( $1 ? $2 : $3 )
endsnippet

snippet ret "return" !b
return $0
endsnippet

snippet in "in expression" w
( $1 in $2 )
endsnippet

snippet has "hasOwnProperty()" w
hasOwnProperty($1)$0
endsnippet

snippet mapf "map(function() {})" w
.map(function(${1:element}) {
	$0 })
endsnippet

snippet for "for loop"
var ${1:length} = ${2:source}.length
for (var ${3:index} = 0; $3 < $1; $3++) {
	var ${4:element} = $2[$3]
	${VISUAL}$0 }
endsnippet

snippet forin
for (${1:name} in $2) {
	$0 }
endsnippet

# JSON

snippet jp "JSON.parse" !w
JSON.parse($0)
endsnippet

snippet js "JSON.stringify" !w
JSON.stringify($0)
endsnippet

# Console

snippet cl
console.log($0)
endsnippet

snippet ce
console.error($0)
endsnippet

snippet cd
console.debug($0)
endsnippet

# Node

snippet ex
exports.$1 = $2
endsnippet

snippet r "require statement" !b
var $1 = require('$0')
endsnippet

snippet re "mirrored require statement" !b
var $1 = require('$1')
endsnippet

snippet cb "callback function"
function(error, ${1:result}) {
	$0 }
endsnippet

snippet mefun
function $1($2) {
	$0 }

module.exports = $1
endsnippet

snippet me "module.exports ="
module.exports = $0
endsnippet

snippet exit "process.exit()"
process.exit($0)
endsnippet

snippet fail "fail"
console.error($0)
process.exit(1)
endsnippet

# Event Emitters

snippet on
.on('${1:data}', function($2) {
	$0 })
endsnippet

snippet onc
.once('${1:data}', function($2) {
	$0 })
endsnippet

snippet pi
.pipe($0)
endsnippet

snippet emit
emit('${1:error}', '$2')
endsnippet

# Testing

snippet t
test('$1', function(test) {
	$0
	test.end() })
endsnippet

snippet tok
test.ok(
	$1,
	'$0')
endsnippet

snippet tnok
test.notOk(
	$1,
	'$0')
endsnippet

snippet teq
test.equal(
	$1,
	$2,
	'$0')
endsnippet

snippet desc
describe('$1', function() {
	$0 })
endsnippet

snippet it
it('$1', function($2) {
	$0 })
endsnippet

snippet be
before(function(${1:done}) {
	$0 })
endsnippet

snippet bee
beforeEach(function(${1:done}) {
	$0 })
endsnippet

snippet af
after(function(${1:done}) {
	$0 })
endsnippet

snippet afe
afterEach(function(${1:done}) {
	$0 })
endsnippet

# HTTP

snippet rr
function(request, response) {
	$0 }
endsnippet

# Functional

snippet map "map" w
map(function(${1:element}) {
	$0 })
endsnippet

snippet fe "forEach" w
forEach(function(${1:element}${2}) {
	$0 })
endsnippet

snippet fold "reduce" w
reduce(
	function(${1:mem}, ${2:element}$3) {
		$0
	},
	$4)
endsnippet

snippet filter "filter" w
filter(function(${1:element}) {
	$0 })
endsnippet
