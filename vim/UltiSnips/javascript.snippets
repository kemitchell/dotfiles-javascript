# ECMA
snippet proto
$1.prototype.$2 = function ($3) {
	$0
}
endsnippet

snippet fun "function" !w
function $1 ($2) {
	$0
}
endsnippet

snippet f "function" !w
function ($1) {
	$0
}
endsnippet

snippet F "function" !w
($1) => $0
endsnippet

snippet FF "function" !w
($1) => {
	$0
}
endsnippet

snippet con
const $1 = $0
endsnippet

snippet vf "var = function (){}" !b
var $1 = function ($2) {
	$0
}
endsnippet

snippet iife "IIFE" !w
(function ($1) {
	$0
})()
endsnippet

snippet sf
(function () {
	$1
	return function ($2) {
		$0
	}
})()
endsnippet

snippet if
if ($1) {
	$2
}$0
endsnippet

snippet iferr
if (error) {
	${1:callback}(error)
} else {
	$0
}
endsnippet

snippet eif
else if ($1) {
	$2
}$0
endsnippet

snippet e
else {
	$1
}$0
endsnippet

snippet ife
if ($1) {
	$2
} else {
	$3
}$0
endsnippet

snippet ter
$1 ? $2 : $3
endsnippet

snippet Ter
$1
? $2
: $0
endsnippet

snippet ret "return" !b
return $0
endsnippet

snippet in "in expression" w
$1 in $0
endsnippet

snippet has "hasOwnProperty()" w
hasOwnProperty($1)$0
endsnippet

snippet for "for loop"
var ${1:length} = ${2:source}.length
for (var ${3:index} = 0; $3 < $1; $3++) {
	var ${4:element} = $2[$3]
	${VISUAL}$0
}
endsnippet

snippet forin
for (${1:name} in $2) {
	$0
}
endsnippet

# JSON

snippet jp "JSON.parse" !w
JSON.parse($0)
endsnippet

snippet js "JSON.stringify" !w
JSON.stringify($0)
endsnippet

# Console

snippet cl
console.log($0)
endsnippet

snippet cls
console.log('$0')
endsnippet

snippet clv
console.log('$1', $1)
endsnippet

snippet clj
console.log('%j', $1)
endsnippet

snippet clvj
console.log('%s is %j', '$1', $1)
endsnippet

snippet ce
console.error($0)
endsnippet

snippet cd
console.debug($0)
endsnippet

# Node

snippet ex
exports.$1 = $2
endsnippet

snippet r "require statement" !b
var $1 = require('$0')
endsnippet

snippet re "mirrored require statement" !b
var $1 = require('`!p snip.rv = re.sub(r'([A-Z])', r'-\1', t[1]).lower()`')$0
endsnippet

snippet cb "callback function"
function (error, ${1:result}) {
	$0
}
endsnippet

snippet mefun
module.exports = function $1 ($2) {
	$0
}
endsnippet

snippet me "module.exports ="
module.exports = $0
endsnippet

snippet exit "process.exit()"
process.exit($0)
endsnippet

snippet fail "fail"
console.error($0)
process.exit(1)
endsnippet

# Event Emitters

snippet on "on" w
on('${1:data}', function ($2) {
	$0
})
endsnippet

snippet once "once" w
once('${1:data}', function ($2) {
	$0
})
endsnippet

snippet pi "pipe" w
pipe($0)
endsnippet

snippet emit "emit" w
emit('${1:error}', '$2')
endsnippet

# Testing

snippet ass
var assert = require('assert')
endsnippet

snippet tape
var tape = require('tape')
endsnippet

snippet suite
tape('$1', function (suite) {
	suite.test('$2', function (test) {
		$0
	})
})
endsnippet

snippet test
test('$1', function (test) {
	$0
	test.end()
})
endsnippet

snippet tok
test.ok(
	$1,
	'$0'
)
endsnippet

snippet tnok
test.notOk(
	$1,
	'$0'
)
endsnippet

snippet teq
test.equal(
	$1, $2,
	'$0'
)
endsnippet

snippet terr
test.ifError(error, 'no error')
endsnippet

# HTTP

snippet rr "HTTP handler" w
function (request, response) {
	$0
}
endsnippet

# Functional

snippet map "map" w
map(function (${1:element}) {
	$0
})
endsnippet

snippet filter "filter" w
filter(function (${1:element}) {
	$0
})
endsnippet

snippet fix "findIndex" w
findIndex(function (${1:element}) {
	$0
})
endsnippet

snippet fi "find" w
find(function (${1:element}) {
	$0
})
endsnippet

snippet lio "lastIndexOf" w
lastIndexOf(function (${1:element}) {
	$0
})
endsnippet

snippet every "every" w
every(function (${1:element}) {
	$0
})
endsnippet

snippet some "some" w
some(function (${1:element}) {
	$0
})
endsnippet

snippet any "any" w
any(function (${1:element}) {
	$0
})
endsnippet

snippet fe "forEach" w
forEach(function (${1:element}${2}) {
	$0
})
endsnippet

snippet fold "reduce" w
reduce(function (${1:mem}, ${2:element}$3) {
	$0
}, $4)
endsnippet

snippet concat "Concatenate Stream" w
var buffer = []
${1:request}
.on('data', function (chunk) {
	buffer.push(chunk)
})
.once('error', function (error) {
	$0
})
.once('end', function () {
	var ${2:body} = Buffer.concat(buffer)
	$0
})
endsnippet

snippet req "HTTP Request" w
http.request({$1})
.once('response', function (response) {
	$0
})
.end($2)
endsnippet

# Literals

snippet o "object" w
{$0}
endsnippet

snippet oo "object" w
{
	$0
}
endsnippet

snippet a "array" w
[$0]
endsnippet

snippet aa "array" w
[
	$0
]
endsnippet

snippet inc "includes" w
includes($0)
endsnippet

snippet html "choo view" w
html\`
	$0
\`
endsnippet

# DOM Events

snippet ael "addEventListener()" w
addEventListener('$1', function (${2:event}) {
	$0
})
endsnippet

snippet rel "removeEventListener()" w
removeEventListener('$1', $0)
endsnippet

snippet time
setTimeout(function () {
	$0
}, ${1:100})
endsnippet

snippet keys "Object.keys" w
Object.keys($1)$0
endsnippet

snippet ignoreif
/* istanbul ignore if */
endsnippet

snippet ignoreelse
/* istanbul ignore else */
endsnippet

snippet ignorenext
/* istanbul ignore next */
endsnippet

snippet args
var args = Array.prototype.slice.call(arguments)
endsnippet

snippet ts "toString()" w
toString()
endsnippet

snippet ifnthis "if not instanceof" w
if (!(this instanceof $1)) {
	return new $1($2)
}$0
endsnippet

snippet exc
var $1 = require('$2').$1
var inherits = require('util').inherits

module.exports = $3

function $3 (options) {
	if (!(this instanceof $3)) {
		return new $3(options)
	}

	$1.call(this)
	$0
}

inherits($3, $1)

var prototype = $3.prototype
endsnippet
