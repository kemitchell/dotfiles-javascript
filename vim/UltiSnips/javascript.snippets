# ECMA
snippet proto
$1.prototype.$2 = function ($3) {
	$0
}
endsnippet

snippet fun "function" !w
function $1 ($2) {
	$0
}
endsnippet

snippet F "arrow function" !w
function ($1) {
	$0
}
endsnippet

snippet f "arrow function" !w
($1) => {
	$0
}
endsnippet

snippet ff "function" !w
() => $0
endsnippet

snippet con
const $1 = $0
endsnippet

snippet vf "var = function (){}" !b
var $1 = ($2) => {
	$0
}
endsnippet

snippet iife "IIFE" !w
(($1) => {
	$0
})()
endsnippet

snippet sf
(() => {
	$1
	return ($2) => {
		$0
	}
})()
endsnippet

snippet if
if ($1) {
	$2
}$0
endsnippet

snippet iferr
if (error) return ${1:done}(error)$0
endsnippet

snippet iece
if (error) return ${1:callback}(error)$0
endsnippet

snippet oncee
.once('error', ${1:callback})$0
endsnippet

snippet eif
else if ($1) {
	$2
}$0
endsnippet

snippet e
else {
	$1
}$0
endsnippet

snippet ife
if ($1) {
	$2
} else {
	$3
}$0
endsnippet

snippet ter
$1 ? $2 : $3
endsnippet

snippet Ter
$1
	? $2
	: $0
endsnippet

snippet ret "return" !b
return $0
endsnippet

snippet in "in expression" w
$1 in $0
endsnippet

snippet has "hasOwnProperty()" w
hasOwnProperty($1)$0
endsnippet

snippet pp "property: property" w
$1: $1$0
endsnippet

snippet for "for loop"
for (let ${2:index} = 0; $2 < ${1:source}.length; $2++) {
	let ${3:element} = $1[$2]
	${VISUAL}$0
}
endsnippet

snippet forin
for (${1:name} in $2) {
	$0
}
endsnippet

# JSON

snippet jp "JSON.parse" !w
JSON.parse($0)
endsnippet

snippet js "JSON.stringify" !w
JSON.stringify($0)
endsnippet

snippet js2 "JSON.stringify(x, null, 2)" !w
JSON.stringify($0, null, 2)
endsnippet

# Console

snippet cl
console.log($0)
endsnippet

snippet cls
console.log('$0')
endsnippet

snippet clv
console.log('$1', $1)
endsnippet

snippet clj
console.log('%j', $1)
endsnippet

snippet clvj
console.log('%s is %j', '$1', $1)
endsnippet

snippet ce
console.error($0)
endsnippet

snippet cd
console.debug($0)
endsnippet

# Node

snippet ex
exports.$1 = $2
endsnippet

snippet r "require statement" !b
const $1 = require('$0')
endsnippet

global !p
from os.path import basename, splitext

def camel_case (string):
	callback = lambda p: p.group(1).upper()
	return re.sub(r'-([a-z])', callback, string)

def base (string):
	return splitext(basename(string))[0]

subs = [[r'url', 'URL'], [r'json', 'JSON'],[r'html', 'HTML']]

def caps (string):
	returned = string
	for sub in subs:
		returned = re.sub(sub[0], sub[1], returned, flags=re.IGNORECASE)
	return returned

endglobal

snippet re "mirrored require statement" !b
const ${0:`!p snip.rv = caps(camel_case(base(t[1])))`} = require('$1')
endsnippet

snippet cb "callback function"
(error, ${1:result}) =>{
	$0
}
endsnippet

snippet bind
$1.bind(${2:null}, $0)
endsnippet

snippet mefun
module.exports = function $1 ($2) {
	$0
}
endsnippet

snippet me "module.exports ="
module.exports = $0
endsnippet

snippet exit "process.exit()"
process.exit($0)
endsnippet

snippet env "process.env" !w
process.env.$0
endsnippet

snippet fail "fail"
console.error($0)
process.exit(1)
endsnippet

# Event Emitters

snippet on "on" w
on('${1:data}', ($2) => {
	$0
})
endsnippet

snippet once "once" w
once('${1:data}', ($2) => {
	$0
})
endsnippet

snippet pi "pipe" w
pipe($0)
endsnippet

snippet emit "emit" w
emit('${1:error}', '$2')
endsnippet

# Testing

snippet ass
const assert = require('assert')
endsnippet

snippet ascb
assert.equal(typeof callback, 'function')
endsnippet

snippet astype
assert.equal(typeof $1, '$2')
endsnippet

snippet suite
tape('$1', suite => {
	suite.test('$2', test => {
		$0
	})
})
endsnippet

snippet test
tape('$1', test => {
	$0
	test.end()
})
endsnippet

snippet tok
test.ok(
	$1,
	'$0'
)
endsnippet

snippet tnok
test.notOk(
	$1,
	'$0'
)
endsnippet

snippet teq
test.equal(
	$1, $2,
	'$0'
)
endsnippet

snippet terr
test.ifError(error, 'no error')
endsnippet

# HTTP

snippet rr "HTTP handler" w
(request, response) => {
	$0
}
endsnippet

# Functional

snippet map "map" w
map(${1:element} => {
	$0
})
endsnippet

snippet filter "filter" w
filter(${1:element} => {
	$0
})
endsnippet

snippet fix "findIndex" w
findIndex(${1:element} => {
	$0
})
endsnippet

snippet find "find" w
find(${1:element} => {
	$0
})
endsnippet

snippet lio "lastIndexOf" w
lastIndexOf(${1:element} => {
	$0
})
endsnippet

snippet every "every" w
every(${1:element} => {
	$0
})
endsnippet

snippet some "some" w
some(${1:element} => {
	$0
})
endsnippet

snippet any "any" w
any(${1:element} => {
	$0
})
endsnippet

snippet fe "forEach" w
forEach(${1:element}${2} => {
	$0
})
endsnippet

snippet fold "reduce" w
reduce((${1:mem}, ${2:element}$3) => {
	$0
}, $4)
endsnippet

snippet concat "Concatenate Stream" w
const chunks = []
${1:stream}
	.on('data', chunk => { chunks.push(chunk) })
	.once('error', error => {
		$2
	})
	.once('end', () => {
		const ${3:buffer} = Buffer.concat(chunks)
		$0
	})
endsnippet

snippet req "HTTP Request" w
http.request({$1})
	.once('response', response => {
		$0
	})
	.end($2)
endsnippet

# Literals

snippet o "object" w
{ $0 }
endsnippet

snippet oo "object" w
{
	$0
}
endsnippet

snippet a "array" w
[$0]
endsnippet

snippet aa "array" w
[
	$0
]
endsnippet

snippet inc "includes" w
includes($0)
endsnippet

snippet html "choo view" w
html\`
	$0
\`
endsnippet

# DOM Events

snippet ael "addEventListener()" w
addEventListener('$1', (${2:event}) => {
	$0
})
endsnippet

snippet rel "removeEventListener()" w
removeEventListener('$1', $0)
endsnippet

snippet time
setTimeout(() => {
	$0
}, ${1:100})
endsnippet

snippet keys "Object.keys" w
Object.keys($1)$0
endsnippet

snippet ignoreif
/* istanbul ignore if */
endsnippet

snippet ignoreelse
/* istanbul ignore else */
endsnippet

snippet ignorenext
/* istanbul ignore next */
endsnippet

snippet args
const args = Array.prototype.slice.call(arguments)
endsnippet

snippet ts "toString()" w
toString()
endsnippet

snippet ifnthis "if not instanceof" w
if (!(this instanceof $1)) {
	return new $1($2)
}$0
endsnippet

snippet exc
const $1 = require('$2').$1
const inherits = require('util').inherits

module.exports = $3

function $3 (options) {
	if (!(this instanceof $3)) {
		return new $3(options)
	}

	$1.call(this)
	$0
}

inherits($3, $1)

const prototype = $3.prototype
endsnippet

# Promises

snippet np "new Promise" w
new Promise((resolve, reject) => {
	$0
})
endsnippet

snippet then "then" w
then((${1:result}) => {
	$0
})
endsnippet

snippet catch "catch" w
catch(error => {
	$0
})
endsnippet

# DOM

snippet dce "createElement" w
document.createElement('$1')$0
endsnippet

snippet dct "createTextNode" w
document.createTextNode($0)
endsnippet

snippet dcf "createDocumentFragment" w
document.createDocumentFragment()
endsnippet

snippet ac "appendChild" w
appendChild($0)
endsnippet

snippet atn "append text node" w
appendChild(document.createTextNode($0))
endsnippet

snippet self
const self = this
endsnippet

snippet pull
const $1 = $2.$1$0
endsnippet
